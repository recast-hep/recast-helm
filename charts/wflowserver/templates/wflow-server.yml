apiVersion: v1
kind: ConfigMap
metadata:
  name: wflow-server-cm
data:
  wflowslots: "{{ .Values.wflowserver.wflowslots }}"
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: wflow-server
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: wflow-server
    spec:
      serviceAccountName: wflowmanager
      containers:
      - name: wflow-beat
        image: recast/wflowserver:{{.Values.ImageTags.wflow_server}}
        imagePullPolicy: {{.Values.ImagePullPolicy }}
        command: ['sh','-c','cd wflowserver && celery beat -A celeryapp -s /beat/what.db']
        volumeMounts:
        - name: data
          mountPath: /beat
          subPath: beat
        {{ if eq .Values.HostOverlays true}}
        - name: localoverlaycode
          mountPath: /code
        {{ end }}
        env:
        - name: WFLOW_BEAT_BROKER
          value: redis://{{.Values.infra.msg_queue}}:6379/2
      - name: wflow-beat-worker
        image: recast/wflowserver:{{.Values.ImageTags.wflow_server}}
        imagePullPolicy: {{.Values.ImagePullPolicy }}
        command: ['sh','-c','cd wflowserver && celery worker -A celeryapp -l info -Q private_queue --concurrency 1'] ### NOTE DEADLOCKING
        env:
        - name: WFLOW_NSLOTS
          valueFrom:
            configMapKeyRef:
              name: wflow-server-cm
              key: wflowslots
        - name: WFLOW_BEAT_BROKER
          value: redis://{{.Values.infra.msg_queue}}:6379/2
        - name: WFLOW_DATABSE_URI
          value: 'postgres://postgres:postgres@{{.Values.infra.database}}'
        - name: WFLOW_BACKEND_REDIS_URL
          value: redis://{{.Values.infra.msg_queue}}:6379/0
        volumeMounts:
        - name: yadage-engine-conf
          mountPath: /yadage_job
        {{ if eq .Values.HostOverlays true}}
        - name: localoverlaycode
          mountPath: /code
        {{ end }}
      - name: wflow-server
        image: recast/wflowserver:{{.Values.ImageTags.wflow_server}}
        imagePullPolicy: {{.Values.ImagePullPolicy }}
        command: ['python','wflowserver/server.py','run_server']
        ports:
        - containerPort: 5000
        env:
        - name: WFLOW_DATABSE_URI
          value: 'postgres://postgres:postgres@{{.Values.infra.database}}'
        - name: WFLOW_BACKEND_REDIS_URL
          value: redis://{{.Values.infra.msg_queue}}:6379/0
        - name: WFLOW_SUBJOB_BASE
          value: '/subjoblogs'
        - name: WFLOW_SUBJOB_TEMPLATE
          value: '{}/{}.log'
        - name: WFLOW_WFLOW_BASE
          value: '/wflowlogs'
        - name: WFLOW_WFLOW_TEMPLATE
          value: '{}/{}.log'
        - name: WFLOW_UPLOAD_IDENTITY_FILE
          value: ''
        - name: WFLOW_SERVER_PORT
          value: '5000'
        volumeMounts:
        - name: data
          mountPath: /subjoblogs
          subPath: joblogs
        - name: data
          mountPath: /wflowlogs
          subPath: wflowlogs
        {{ if eq .Values.HostOverlays true}}
        - name: localoverlaycode
          mountPath: /code
        {{ end }}
      volumes:
      {{ if eq .Values.HostOverlays true}}
      - name: localoverlaycode
        hostPath:
          path: {{ .Values.LocalOverlays.WflowServerCode }}
      {{end}}
      - name: data
        persistentVolumeClaim:
          claimName: {{.Values.wflowserverclaim}}
      - name: yadage-engine-conf
        configMap:
          name: wflow-engine-conf-yadage
---
apiVersion: v1
kind: Service
metadata:
  name: wflow-server
spec:
  type: {{ .Values.InternalServiceType }}
  ports:
  - port: 80
    targetPort: 5000
    name: http
    protocol: TCP
  selector:
    app: wflow-server
